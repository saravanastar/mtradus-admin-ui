(function(){
 var app = angular.module("mtradus",['appUtils', 'menu','ui.router','login','dashBoard', 'topHeader', 'procurement']);
 app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function($stateProvider,$urlRouterProvider, $httpProvider){
	 $httpProvider.interceptors.push('appHttpInterceptor');
	 $stateProvider.state('app',{
		 abstract :  true,
		 views : {			 
			 'topheader@' : {
				 templateUrl : '/static/component/widget/top-header/template/top-header.html',
				 controller : 'topHeaderController as topHeaderControllerVm'
				 
			 },
			 'hamburger@' : {
				 templateUrl : '/static/component/widget/hamburger/template/hamburgerMenu.html',
				 controller : 'hamburgerMenuController as hamburgerMenuControllerVM'
				 
			 },
			 'footer@' : {
				 templateUrl : '/static/component/widget/footer/template/footer.html',
			 }
			 
		 },
		 resolve : {
			 spinnerEvent : function() {
				 return {
					 visible: false,
		              show: function() {
		                this.visible = true;
		              },
		              hide: function() {
		                this.visible = false;
		              }
				 }
			 },
		 	userState : function() {
		 		return {
		 			loggedInStatus : false,
		 			authorized : function() {
		 				this.loggedInStatus = true;
		 			},
		 			unAuthorized : function() {
		 				this.loggedInStatus = false;
		 			}
		 		}
		 	}
		 }
	 });
 }]);
app.run(['$rootScope', '$state', '$stateParams', function ($rootScope,   $state, $stateParams) {
    
   
    $state.go('app.dashboard');
}]);
app.constant('config', {
    appName: 'Mtradus',
    appVersion: 2.0,
    apiUrl: "http://localhost/mtradus/service/"
});
})();
/**
 * 
 */

(function() {
	
	function appInterceptor($q, $location,  $injector) {
		  var state;
		    return {
		      'responseError': function(response) {
		          if (response.status === 401) {
		            state = $injector.get('$state');
		            state.go('app.login', {next : state.current.name});
		          }
		          return $q.reject(response);
		        }
		    };
	}
	
	angular.module('mtradus').factory('appHttpInterceptor',['$q', '$location', '$injector', appInterceptor]);
})();
/**
 * 
 */

(function() {
	function restClient($q, $http) {
		var config = {
			method : '',
			url : '',
			// data :'',
			headers : {
				'Content-Type' : 'application/json'
			}
		}

		this.get = function(url, parameter) {
			var def = $q.defer();
			config.method = 'GET';
			config.url = url;
			if (parameter) {
				config.data = parameter;
			}
			$http(config).then(function(responseData) {
				def.resolve(responseData.data);
			}, function(errorResponse) {
				def.reject(errorResponse.data);
			});
			return def.promise;
		}
		
		this.post = function(url, parameter) {
			var def = $q.defer();
			config.method = 'POST';
			config.url = url;
			if (parameter) {
				config.data = parameter;
			}
			$http(config).then(function(responseData) {
				def.resolve(responseData.data);
			}, function(errorResponse) {
				def.reject(errorResponse.data);
			});
			return def.promise;
		}
		
		this.put = function(url, parameter) {
			var def = $q.defer();
			config.method = 'put';
			config.url = url;
			if (parameter) {
				config.data = parameter;
			}
			$http(config).then(function(responseData) {
				def.resolve(responseData.data);
			}, function(errorResponse) {
				def.reject(errorResponse.data);
			});
			return def.promise;
		}
		
		this.callDelete = function(url, parameter) {
			var def = $q.defer();
			config.method = 'delete';
			config.url = url;
			if (parameter) {
				config.data = parameter;
			}
			$http(config).then(function(responseData) {
				def.resolve(responseData.data);
			}, function(errorResponse) {
				def.reject(errorResponse.data);
			});
			return def.promise;
		}

	}
	angular.module('appUtils', []).service('restClient',
			[ '$q', '$http', restClient ]);
})();
/**
 * 
 */
(function() {
	angular.module('dashBoard',['ui.router']);
	angular.module('dashBoard').config(['$stateProvider',stateConfig]);
	function stateConfig($stateProvider) {
		$stateProvider.state('app.dashboard', {
			views : {
				'@' : {
					 templateUrl : '/static/component/widget/dashboard/template/dashboard.html',
					 controller : 'dashBoardController',
					 controllerAs : 'dashBoardControllerVM'
				 },
				 'recentChanges@app.dashboard' : {
					 templateUrl : '/static/component/widget/recent-changes/template/recent-changes.html'
				 }
			}
		});
	}
})();
(function() {
	angular.module('dashBoard').controller("dashBoardController",["$scope", dashBoardController]);
	function dashBoardController($scope) {
		var dashBoardControllerVM = this;
		dashBoardControllerVM.dashboardName = "mtradus1";
	}

})();

(function() {
	
	function hamburgerMenuController($scope) {
		var hamburgerMenuControllerVM = this;

		$scope.selectedMenu = 'dashboard';
        $scope.collapseVar = 0;
        $scope.multiCollapseVar = 0;
        
        $scope.check = function(x){
          
          if(x == $scope.collapseVar) {
            $scope.collapseVar = 0;
          } else {
            $scope.collapseVar = x;
          }
        };
        
        $scope.multiCheck = function(y){
          
          if(y==$scope.multiCollapseVar)
            $scope.multiCollapseVar = 0;
          else
            $scope.multiCollapseVar = y;
        };
		
	}

	angular.module('menu', ['ui.router']).controller("hamburgerMenuController",["$scope", hamburgerMenuController]);

})();



/**
 * 
 */

(function() {
	angular.module('menu');
	angular.module('menu').config(['$stateProvider',stateConfig]);
	function stateConfig($stateProvider) {
		$stateProvider.state('app.menu', {
			views : {
				'@' : {
					 templateUrl : '/static/component/widget/login/template/hamburgerMenu.html',
					 /*controller : 'hamburgerController',
					 controllerAs : 'hamburgerControllerVM'*/
				 }
			}
		});
	}
})();
/**
 * 
 */

(function() {
	angular.module('login',['ui.router']);
	angular.module('login').config(['$stateProvider',stateConfig]);
	function stateConfig($stateProvider) {
		$stateProvider.state('app.login', {
			views : {
				'@' : {
					 templateUrl : '/static/component/widget/login/template/login.html',
					 controller : 'loginController',
					 controllerAs : 'loginControllerVM'
				 }
			}
		});
	}
})();
/**
 * 
 */

(function() {
	
	function loginController($scope, $rootScope, spinnerEvent, restClient, $state) {
		var loginControllerVM = this;
		
		loginControllerVM.onClickLogin =  function() {
			if (loginControllerVM.userName && loginControllerVM.password) {
				var userPayload = {
						userName : loginControllerVM.userName,
						password : loginControllerVM.password
				}
				spinnerEvent.show();
				restClient.post('/mtradus/service/user/login', userPayload).then(function(userData) {
					$state.go('app.dashboard');
					window.location.reload();
					
					spinnerEvent.hide();
				}, function(errorData) {
					loginControllerVM.isError = true;
					spinnerEvent.hide();
				});
			}
			
		}
		
		
	}
	angular.module("login").controller("loginController",['$scope',
	             '$rootScope', 'spinnerEvent', 'restClient', '$state', loginController])
})();
/**
 * 
 */

(function() {
	function stateConfig($stateProvider) {
		$stateProvider.state('app.procurement', {
			url : '/procurement',
			views : {
				'@' : {
					
					 templateUrl : '/static/component/widget/procurement/template/procurement.html',
					 controller : 'procurementController',
					 controllerAs : 'procurementControllerVM'
				},
				'vendor@app.procurement' : {
					templateUrl : '/static/component/widget/procurement/vendor/template/vendor.html',
					controller : 'vendorController',
					controllerAs: 'vendorControllerVM'
				},
				'product@app.procurement' : {
					templateUrl : '/static/component/widget/procurement/product/template/product.html',
					controller : 'productController',
					controllerAs: 'productControllerVM'
				}/*,
				'category@app.procurement' : {
					templateUrl : '/static/component/widget/procurement/category/template/category.html',
					controller : 'categoryController',
					controllerAs: 'categoryControllerVM'
				}*/
			}
		});
	}
	angular.module('procurement',['ui.router', 'vendor', 'product']);
	angular.module('procurement').config(['$stateProvider',stateConfig]);
})();
/**
 * 
 */

(function() {
	function procurementController($scope, spinnerEvent, $rootScope, procurementFactory, config, restClient) {
		var procurementControllerVM = this;
		
		
		$scope.showProduct = false;
		$scope.showCategory = false;
		
		$scope.procureObject = {
				vendor:null,
				product : null,
				category:null
		};
		
		
		

	}
	angular.module('procurement').controller('procurementController',
			[ '$scope', 'spinnerEvent', '$rootScope', 'procurementFactory', 'config', 'restClient', procurementController ])
})();
/**
 * 
 */

(function() {
	
	function procurementFactory(restClient) {
		
	}
	
	angular.module('procurement').factory('procurementFactory',['restClient', 'config', procurementFactory]);
})();
(function() {
	
	function topHeaderController($scope, $rootScope, spinnerEvent, restClient, $state, config, userState) {
		var topHeaderControllerVm = this;
		topHeaderControllerVm.spinnerEvent = spinnerEvent;
		topHeaderControllerVm.userObject = {};
			spinnerEvent.show();
			restClient.get(config.apiUrl +'/user/login').then(function(responseData) {
				topHeaderControllerVm.userObject = responseData;
				userState.authorized();
				spinnerEvent.hide();	
			}, function(errorData) {
				$state.go('app.login');
				spinnerEvent.hide();
			});
		
		topHeaderControllerVm.logout = function() {
			spinnerEvent.show();
			restClient.post(config.apiUrl + 'user/signout').then(function(responseData) {
				topHeaderControllerVm.userObject = null;
				userState.unAuthorized();
				$state.go('app.login');
				
				spinnerEvent.hide();	
			}, function(errorData) {
				spinnerEvent.hide();
			});
		}
		
		topHeaderControllerVm.logIn = function() {
			$state.go('app.login');
		}
		
		 $rootScope.$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {
		    	if (!userState.loggedInStatus && toState.name !== 'app.login') {
		    		e.preventDefault();
		    		$state.go('app.login');
		    	}
		        
		});
		 
	}
	
	angular.module('topHeader',[]).controller('topHeaderController',['$scope', '$rootScope','spinnerEvent', 
	                                                                 'restClient', '$state', 'config', 'userState', topHeaderController]);
})();
/**
 * 
 */

(function() {
	function productController($scope, spinnerEvent, $rootScope, procurementFactory, config, restClient) {
		var productControllerVM = this;
		
		productControllerVM.showProduct =  $scope.$parent.showProduct;

		$scope.$watch('procureObject', function(newValue, oldValue) {
			if ($scope.$parent.procureObject.vendor) {
				console.log("sdf" + $scope.procureObject.vendor.vendorId);
			}
		});
		function loadDefault() {
			 $scope.$parent.showCategory = false;
			productControllerVM.productListObject = null;
			productControllerVM.disableProductInputs = true;
			productControllerVM.message = {};
			productControllerVM.currentMode = {
				vendor : null,
				product : null,
				category : null
			};
			//productControllerVM.getProductList();
		}
		
		
		
		productControllerVM.getProductList = function() {
	
			spinnerEvent.show();
			restClient.get(config.apiUrl + "data/vendor/" + $scope.procureObject.vendor.vendorId).then(function(productList) {
				
				$scope.$parent.procureObject.vendor = productList;
				spinnerEvent.hide();
			}, function() {
				spinnerEvent.hide();
			});
		}
		
		productControllerVM.onProductCancel = function() {
			productControllerVM.currentMode.product = null;
			productControllerVM.productName = '';
			productControllerVM.productId = '';
			productControllerVM.ProductActive = '';
			productControllerVM.productDescription = '';
			productControllerVM.disableProductInputs = true;
			productControllerVM.message = {};
			if (productControllerVM.selectedProductOption) {
				 $scope.$parent.showCategory = true;
				 $scope.$parent.procureObject.product = angular.fromJson(productControllerVM.selectedProductOption);
			}
		};
		
		productControllerVM.onProductSubmit = function() {
			if(productControllerVM.productName && productControllerVM.productActive
					&& productControllerVM.productDescription) {
				if (productControllerVM.currentMode.product == 'edit') {
					productControllerVM.updateProductObject();
				}
				if (productControllerVM.currentMode.product == 'add') {
					productControllerVM.addProductObject();
				}
			}
		};
		
		productControllerVM.updateProductObject = function() {
			var productObject = {
					vendorId : $scope.procureObject.vendor.vendorId,
					productName : productControllerVM.productName,
					status : (productControllerVM.productActive === 'true'),
					description : productControllerVM.productDescription
			};
			spinnerEvent.show();
			restClient.put(config.apiUrl+'data/product/'+productControllerVM.productId,productObject).then(function(responseData) {
				productControllerVM.message.info = 'Data successfully updated';
				productControllerVM.productDefaultState();
				spinnerEvent.hide();	
			}, function(errorData) {
				productControllerVM.message.error = errorData.errorMessage;
				spinnerEvent.hide();
			})
		};
		
		productControllerVM.addProductObject = function() {
			var productObject = {
					vendorId : $scope.procureObject.vendor.vendorId,
					productName : productControllerVM.productName,
					status : (productControllerVM.productActive === 'true'),
					description : productControllerVM.productDescription
			};
			spinnerEvent.show();
			restClient.post(config.apiUrl+'data/product',productObject).then(function(responseData) {
				
				productControllerVM.message.info = 'Data successfully added';
				productControllerVM.productDefaultState();
				spinnerEvent.hide();	
			}, function(errorData) {
				productControllerVM.message.error = errorData.errorMessage;
				spinnerEvent.hide();
			})
		};
		
		productControllerVM.deleteProductObject = function() {
			var convertedObject = angular.fromJson(productControllerVM.selectedProductOption);
			if (convertedObject) {
				spinnerEvent.show();
				restClient.callDelete(config.apiUrl+'data/product/'+convertedObject.productId).then(function(responseData) {
					
					productControllerVM.message.info = 'Data successfully deleted';
					productControllerVM.productDefaultState();
					spinnerEvent.hide();	
				}, function(errorData) {
					productControllerVM.message.error = errorData.errorMessage;
					spinnerEvent.hide();
				})
			}
			
		};
		
		productControllerVM.editProduct = function() {
			var convertedObject = angular.fromJson(productControllerVM.selectedProductOption);
			if(convertedObject) {
				
				productControllerVM.disableProductInputs = false;
				productControllerVM.productName = convertedObject.productName;
				productControllerVM.productId = convertedObject.productId;
				productControllerVM.productActive = String(convertedObject.status);
				productControllerVM.productDescription = convertedObject.description;
				productControllerVM.currentMode.product = "edit";
			}
		};
		
		productControllerVM.addProduct = function() {
				
				productControllerVM.disableProductInputs = false;
				productControllerVM.productName = '';
				productControllerVM.productId = '';
				productControllerVM.productActive = '';
				productControllerVM.productDescription = '';
				productControllerVM.currentMode.product = "add";
			
		};
		
		productControllerVM.onProductChange = function() {
			productControllerVM.productName = '';
			productControllerVM.productId = '';
			productControllerVM.productActive = '';
			productControllerVM.productDescription = '';
			productControllerVM.message = {};
			productControllerVM.currentMode.product = null;
			productControllerVM.disableProductInputs = true;
			if(productControllerVM.selectedProductOption) {
				$scope.$parent.showCategory = true;
				$scope.procureObject.product = angular.fromJson(productControllerVM.selectedProductOption);
				
				productControllerVM.loadCategoryByProductId();
				
			}
		};
		
		productControllerVM.productDefaultState = function() {
			productControllerVM.disableProductInputs = true;
			productControllerVM.currentMode.product = null;
			productControllerVM.selectedProductOption = null;
			productControllerVM.getProductList();
		};
		
		productControllerVM.loadCategoryByProductId = function() {
			
			restClient.get(config.apiUrl + 'data/category/product/'+$scope.procureObject.product.productId).then(function(responseData) {
				$scope.procureObject.product.productCategoryDetails = responseData;
			}, function(errorData) {
				
			})
		}
		loadDefault();
		
	}
	angular.module('product',[]).controller('productController',['$scope', 'spinnerEvent', '$rootScope', 'procurementFactory', 'config', 'restClient', productController])
})();
/**
 * 
 */

(function() {
	function vendorController($scope, spinnerEvent, $rootScope, procurementFactory, config, restClient) {
		var vendorControllerVM = this;

		function loadDefault() {
			$scope.showCategory = false;
			$scope.$parent.showProduct = false;
			vendorControllerVM.vendorListObject = null;
			vendorControllerVM.enableVendorInputs = true;
			vendorControllerVM.message = {};
			vendorControllerVM.currentMode = {
				vendor : null,
				product : null,
				category : null
			};
			vendorControllerVM.getVendorList();
		}
		
		
		
		vendorControllerVM.getVendorList = function() {
			var vendorObject = null;
			spinnerEvent.show();
			restClient.get(config.apiUrl + "data/vendors").then(function(vendorList) {
				vendorControllerVM.vendorListObject = vendorList;
				spinnerEvent.hide();
			}, function() {
				spinnerEvent.hide();
			});
		}
		
		vendorControllerVM.onVendorCancel = function() {
			vendorControllerVM.currentMode.vendor = null;
			vendorControllerVM.vendorName = '';
			vendorControllerVM.vendorId = '';
			vendorControllerVM.vendorActive = '';
			vendorControllerVM.enableVendorInputs = true;
			vendorControllerVM.message = {};
			if (vendorControllerVM.selectedVendorOption) {
				$scope.$parent.showProduct = true;
			}
		};
		
		vendorControllerVM.onVendorSubmit = function() {
			if(vendorControllerVM.vendorName && vendorControllerVM.vendorActive) {
				if (vendorControllerVM.currentMode.vendor == 'edit') {
					vendorControllerVM.updateVendorObject();
				}
				if (vendorControllerVM.currentMode.vendor == 'add') {
					vendorControllerVM.addVendorObject();
				}
			}
		};
		
		vendorControllerVM.updateVendorObject = function() {
			var vendorObject = {
					
					vendorName : vendorControllerVM.vendorName,
					active : (vendorControllerVM.vendorActive === 'true')
			};
			spinnerEvent.show();
			restClient.put(config.apiUrl+'data/vendor/'+vendorControllerVM.vendorId,vendorObject).then(function(responseData) {
				vendorControllerVM.message.info = 'Data successfully updated';
				vendorControllerVM.vendorDefaultState();
				spinnerEvent.hide();	
			}, function(errorData) {
				vendorControllerVM.message.error = errorData.errorMessage;
				spinnerEvent.hide();
			})
		};
		
		vendorControllerVM.addVendorObject = function() {
			var vendorObject = {
					vendorName : vendorControllerVM.vendorName,
					active : (vendorControllerVM.vendorActive === 'true')
			};
			spinnerEvent.show();
			restClient.post(config.apiUrl+'data/vendor',vendorObject).then(function(responseData) {
				
				vendorControllerVM.message.info = 'Data successfully added';
				vendorControllerVM.vendorDefaultState();
				spinnerEvent.hide();	
			}, function(errorData) {
				vendorControllerVM.message.error = errorData.errorMessage;
				spinnerEvent.hide();
			})
		};
		
		vendorControllerVM.deleteVendorObject = function() {
			var convertedObject = angular.fromJson(vendorControllerVM.selectedVendorOption);
			if (convertedObject) {
				spinnerEvent.show();
				restClient.callDelete(config.apiUrl+'data/vendor/'+convertedObject.vendorId).then(function(responseData) {
					
					vendorControllerVM.message.info = 'Data successfully deleted';
					vendorControllerVM.vendorDefaultState();
					spinnerEvent.hide();	
				}, function(errorData) {
					vendorControllerVM.message.error = errorData.errorMessage;
					spinnerEvent.hide();
				})
			}
			
		};
		
		vendorControllerVM.editVendor = function() {
			var convertedObject = angular.fromJson(vendorControllerVM.selectedVendorOption);
			if(convertedObject) {
				$scope.$parent.showProduct = false;
				vendorControllerVM.enableVendorInputs = false;
				vendorControllerVM.vendorName = convertedObject.vendorName;
				vendorControllerVM.vendorId = convertedObject.vendorId;
				vendorControllerVM.vendorActive = String(convertedObject.active);
				vendorControllerVM.currentMode.vendor = "edit";
			}
		};
		
		vendorControllerVM.addVendor = function() {
				$scope.$parent.showProduct = false;
				vendorControllerVM.enableVendorInputs = false;
				vendorControllerVM.vendorName = '';
				vendorControllerVM.vendorId = '';
				vendorControllerVM.vendorActive = '';
				vendorControllerVM.currentMode.vendor = "add";
			
		};
		
		vendorControllerVM.onVendorChange = function() {
			vendorControllerVM.vendorName = '';
			vendorControllerVM.vendorId = '';
			vendorControllerVM.vendorActive = '';
			vendorControllerVM.message = {};
			vendorControllerVM.currentMode.vendor = null;
			vendorControllerVM.enableVendorInputs = true;
			if(vendorControllerVM.selectedVendorOption) {
				$scope.$parent.showProduct = true;
				$scope.$parent.procureObject.vendor = angular.fromJson(vendorControllerVM.selectedVendorOption);
				/*$scope.$parent.productObject = angular.fromJson(vendorControllerVM.selectedVendorOption).productDetails;*/
			}
		};
		
		vendorControllerVM.vendorDefaultState = function() {
			vendorControllerVM.enableVendorInputs = true;
			vendorControllerVM.currentMode.vendor = null;
			vendorControllerVM.selectedVendorOption = null;
			vendorControllerVM.getVendorList();
		};
		loadDefault();
		
	}
	angular.module('vendor',[]).controller('vendorController',['$scope', 'spinnerEvent', '$rootScope', 'procurementFactory', 'config', 'restClient', vendorController])
})();